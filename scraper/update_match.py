from datetime import datetime
from scraper.pars_team import get_team_matches
from database.check_matches import get_existing_matches
from scraper.pars_game import parse_game
from database.delete_match import delete_oldest_match
from utils.config_loader import load_config


def update_matches(team_id):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–∞—Ç—á–∏ –∏–∑ –±–∞–∑—ã
    
    existing_matches = get_existing_matches(team_id)
    existing_ids = {match["id"] for match in existing_matches}
    
    new_matches = get_team_matches(team_id)
    
    for link in new_matches:
        match_id = link.rstrip('/').split('/')[-1]
        
        if match_id not in existing_ids:
            print(f"–û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—á {match_id}")
            parse_game(team_id, link)
        else:
            print(f"–ú–∞—Ç—á {match_id} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ")
            
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –º–∞—Ç—á–µ–π
    # if len(existing_matches) > 20:
    #     matches_to_delete = sorted(existing_matches, key=lambda match: match["date"])[:-10]

    #     for match in matches_to_delete:
    #         print(f"–£–¥–∞–ª—è–µ–º –º–∞—Ç—á {match['id']}")
    #         delete_oldest_match(match["id"])
            

def update_all_teams():
    config = load_config()
    teams = config.get("teams", {})
    print(teams)
    if not teams:
        print("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ config.json!")
        return

    for team_name, team_id in teams.items():
        print(f"\nüîç –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—á–∏ –¥–ª—è {team_name} (ID: {team_id})")
        update_matches(team_id)
